Dependências:


Padronização (boa pratica):

Camadas -> a camada serviço retorna pro controller, o DTO e não a entidade, por isso uma classe GameDTO contendo os mesmo atributos da entidade original Game
evitando representação cíclica de objetos 

Service -> todo método do service colocar anotação para que fique transacional, garante que a operação com o BD vai acontecer, obedecendo os principios das transações ACID

Application.properties / application.yml -> configuração flexível, implementando variáveis que serão posteriormente adicionadas no deploys. ex: spring.profiles.active=${APP_PROFILE:local} o "${APP_PROFILE}" é uma variavel que será configurada no deploy

APRENDIZADO:

API rest
java, springboot
ORM, JPA
Camadas, DTO (Data transfer object)

Modelo de dominio
Consulta sql
Projetions
Embedded id

Relacionamento n-n
Classe de associação, embedded id (BelongingPK)
Consultas SQL no Spring Data JPA (SQL(nativeQuery e não JP/QL (JPA)))
Projections (pra questão de uso de NativeQuery)

ambiente local Docker
processo de deploy com CI/CD


O QUE É:
ORM -> mapeamento de objeto relacional

MODELO DE DOMINIO -> belonging é a terceira tabela do relacionamento, de muitos pra muitos entre game e gamelist,
a chave primaria aqui nessa tabela belonging é integrada (embedded id), de uma outra classe (objeto(BelongingPK))

belongingPK é pra referenciar os dois ids que precisam ter na tabela belonging
a anotação embeddable serve pra encapsular dois atributos em uma classe para formar a chaves primarias das classes principais, que sao as estrangeiras da tabela

OBSERVAÇÕES: 
ao invés de import.sql, estou usando nesse projeto flyway para aprimorar habilidades

quando se usa 'nativequery' no repository, ou seja, SQL e não JPQL (jpa), o resultado da consulta tem que ser uma interface, no spring se chama 'projection'

uso de lombok em algumas entities pra aprimorar habilidades (opcional)

adicionar arquivo no projeto principal, system.properties, pra quando fazer deploy em nuvem na plataforma
 